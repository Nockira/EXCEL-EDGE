openapi: 3.0.0
info:
  title: Exceledge API
  description: API for Exceledge
  version: 1.0.0
servers:
  - url: http://localhost:8800/api/v1
    description: Local server
  - url: https://api.exceledge.com/api/v1
    description: Staging server
  - url: https://exceledge.com/api/v1
    description: Production server
paths:
  /health-check:
    get:
      summary: Health check
      description: Check if the server is running
      responses:
        "200":
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
  /users:
    post:
      summary: Register a new user
      description: This endpoint registers a new user in the system with validation based on the provided schema.
      operationId: userRegister
      tags:
        - Users
      requestBody:
        description: The user data required for registration.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Validation failed.
        "500":
          description: Internal server error.
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all registered users, with optional pagination, sorting, and search.
      operationId: getUsers
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        firstName:
                          type: string
                        secondName:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /users/{id}:
    patch:
      summary: Update user details
      description: Update an existing user's details by their ID.
      operationId: updateUser
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Validation failed.
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
    get:
      summary: Get a single user
      description: Retrieves a single user's details by their unique ID.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A single userâ€™s details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Something went wrong. Please try again later."
    delete:
      summary: Delete a user
      description: Deletes a user from the system by their ID.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user to be deleted.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully."
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Something went wrong. Please try again later."

  /users/login:
    post:
      summary: User Login
      description: Authenticates a user using email or phone number and a password.
      tags:
        - Users-Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                phone:
                  type: string
                  example: "0780000000"
                password:
                  type: string
                  format: password
                  example: "P@ssw0rd"
              oneOf:
                - required: [email]
                - required: [phone]
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful."
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Either email or phone number is required."
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password."
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Something went wrong. Please try again later."
  /transactions:
    post:
      summary: Create a new transaction
      security:
        - BearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Server error

    get:
      summary: Get all transactions
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionWithUser"
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /transactions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Transaction ID

    get:
      summary: Get transaction by ID
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionWithUser"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

    patch:
      summary: Update transaction
      security:
        - BearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransactionRequest"
      responses:
        "200":
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

    delete:
      summary: Delete transaction
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

  /transactions/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Transaction ID

    patch:
      summary: Update payment status
      security:
        - BearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStatusRequest"
      responses:
        "200":
          description: Payment status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

  /transactions/user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID

    get:
      summary: Get transactions by user ID
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: List of user transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionWithUser"
        "400":
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /transactions/update-remaining-time:
    post:
      summary: Manually update remaining time (admin only)
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: Remaining time updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRemainingTimeResponse"
        "401":
          description: Unauthorized
        "500":
          description: Server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name.
        secondName:
          type: string
          description: The user's second name (optional).
        email:
          type: string
          description: The user's email address (must be unique).
        phone:
          type: string
          description: The user's phone number (optional, must be unique).
        password:
          type: string
          description: The user's password.
        gender:
          type: string
          description: The user's gender (optional).
        dob:
          type: string
          format: date
          description: The user's date of birth (optional).
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
          description: The user's role in the system.
      required:
        - firstName
        - email
        - password

    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        firstName:
          type: string
          description: The user's first name.
        secondName:
          type: string
          description: The user's second name (optional).
        email:
          type: string
          description: The user's email address.
        phone:
          type: string
          description: The user's phone number (optional).
        password:
          type: string
          description: The user's password.
        gender:
          type: string
          description: The user's gender (optional).
        dob:
          type: string
          format: date
          description: The user's date of birth (optional).
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
          description: The user's role.
        createdAt:
          type: string
          format: date-time
          description: The date and time the user was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the user was last updated.

    Role:
      type: string
      enum: [USER, STAFF, ADMIN, PARTNER]
      description: The different roles a user can have in the system.
    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        gender:
          type: string
        dob:
          type: string
          format: date
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
      example:
        firstName: Jane
        secondName: Doe
        email: janedoe@example.com
        phone: 0781234567
        gender: Female
        dob: 1995-08-25
        role: USER
    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          example: error
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        method:
          type: string
          enum: [MTN, AIRTEL]
        duration:
          type: integer
          description: Duration in months
        remainingTime:
          type: integer
          description: Remaining time in days
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        service:
          type: string
        createdAt:
          type: string
          format: date-time

    TransactionWithUser:
      allOf:
        - $ref: "#/components/schemas/Transaction"
        - type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                firstName:
                  type: string
                secondName:
                  type: string

    CreateTransactionRequest:
      type: object
      required:
        - userId
        - amount
        - method
        - duration
        - service
      properties:
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        method:
          type: string
          enum: [MTN, AIRTEL]
        duration:
          type: integer
          description: Duration in months
        service:
          type: string

    UpdateTransactionRequest:
      type: object
      properties:
        amount:
          type: number
          format: float
        method:
          type: string
          enum: [MTN, AIRTEL]
        duration:
          type: integer
          description: Duration in months
        service:
          type: string
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]

    UpdateStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]

    DeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: Transaction deleted successfully

    UpdateRemainingTimeResponse:
      type: object
      properties:
        updated:
          type: integer
          description: Number of transactions updated
