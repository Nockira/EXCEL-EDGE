openapi: 3.0.0
info:
  title: Exceledge API
  description: API for Exceledge
  version: 1.0.0
servers:
  - url: http://localhost:8800/api/v1
    description: Local server
  - url: https://api.exceledge.com/api/v1
    description: Staging server
  - url: https://exceledge.com/api/v1
    description: Production server
paths:
  /health-check:
    get:
      summary: Health check
      description: Check if the server is running
      responses:
        "200":
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
  /users:
    post:
      summary: Register a new user
      description: This endpoint registers a new user in the system with validation based on the provided schema.
      operationId: userRegister
      tags:
        - Users
      requestBody:
        description: The user data required for registration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. Validation failed.
        '500':
          description: Internal server error.
  /users/login:
    post:
      summary: User Login
      description: Authenticates a user using email or phone number and a password.
      tags:
        - Users-Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                phone:
                  type: string
                  example: "0780000000"
                password:
                  type: string
                  format: password
                  example: "P@ssw0rd"
              oneOf:
                - required: [email]
                - required: [phoneNumber]
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful."
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Either email or phone number is required."
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password."
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Something went wrong. Please try again later."

components:
  schemas:
    RegisterUser:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name.
        secondName:
          type: string
          description: The user's second name (optional).
        email:
          type: string
          description: The user's email address (must be unique).
        phone:
          type: string
          description: The user's phone number (optional, must be unique).
        password:
          type: string
          description: The user's password.
        gender:
          type: string
          description: The user's gender (optional).
        dob:
          type: string
          format: date
          description: The user's date of birth (optional).
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
          description: The user's role in the system.
      required:
        - firstName
        - email
        - password

    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        firstName:
          type: string
          description: The user's first name.
        secondName:
          type: string
          description: The user's second name (optional).
        email:
          type: string
          description: The user's email address.
        phone:
          type: string
          description: The user's phone number (optional).
        password:
          type: string
          description: The user's password.
        gender:
          type: string
          description: The user's gender (optional).
        dob:
          type: string
          format: date
          description: The user's date of birth (optional).
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
          description: The user's role.
        createdAt:
          type: string
          format: date-time
          description: The date and time the user was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the user was last updated.

    Role:
      type: string
      enum: [USER, STAFF, ADMIN, PARTNER]
      description: The different roles a user can have in the system.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
