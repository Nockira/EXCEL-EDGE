openapi: 3.0.0
info:
  title: Exceledge API
  description: API for Exceledge
  version: 1.0.0
servers:
  - url: http://localhost:8800/api/v1
    description: Local server
  - url: https://excel-edge.onrender.com/api/v1
    description: Staging server
  - url: https://exceledge.com/api/v1
    description: Production server
paths:
  /health-check:
    get:
      summary: Health check
      description: Check if the server is running
      responses:
        "200":
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"
  /users:
    post:
      summary: Register a new user
      description: This endpoint registers a new user in the system with validation based on the provided schema.
      operationId: userRegister
      tags:
        - Users
      requestBody:
        description: The user data required for registration.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        "201":
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Validation failed.
        "500":
          description: Internal server error.
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all registered users, with optional pagination, sorting, and search.
      operationId: getUsers
      security:
        - BearerAuth: []
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        firstName:
                          type: string
                        secondName:
                          type: string
                        email:
                          type: string
                        role:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
  /users/{id}:
    patch:
      summary: Update user details
      description: Update an existing user's details by their ID.
      operationId: updateUser
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUser"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request. Validation failed.
        "401":
          description: Unauthorized.
        "404":
          description: User not found.
        "500":
          description: Internal server error.
    get:
      summary: Get a single user
      description: Retrieves a single user's details by their unique ID.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: A single userâ€™s details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Something went wrong. Please try again later."
    delete:
      summary: Delete a user
      description: Deletes a user from the system by their ID.
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the user to be deleted.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully."
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "User not found."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    example: "Something went wrong. Please try again later."

  /users/login:
    post:
      summary: User Login
      description: Authenticates a user using email or phone number and a password.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "johndoe@example.com"
                phone:
                  type: string
                  example: "0780000000"
                password:
                  type: string
                  format: password
                  example: "P@ssw0rd"
              oneOf:
                - required: [email]
                - required: [phone]
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful."
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Either email or phone number is required."
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password."
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Something went wrong. Please try again later."
  /transactions:
    post:
      summary: Create a new transaction
      security:
        - BearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTransactionRequest"
      responses:
        "201":
          description: Transaction created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Server error

    get:
      summary: Get all transactions
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionWithUser"
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /transactions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Transaction ID

    get:
      summary: Get transaction by ID
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionWithUser"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

    patch:
      summary: Update transaction
      security:
        - BearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTransactionRequest"
      responses:
        "200":
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

    delete:
      summary: Delete transaction
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteResponse"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

  /transactions/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Transaction ID

    patch:
      summary: Update payment status
      security:
        - BearerAuth: []
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStatusRequest"
      responses:
        "200":
          description: Payment status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Bad request - validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "404":
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error

  /transactions/user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: User ID

    get:
      summary: Get transactions by user ID
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: List of user transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionWithUser"
        "400":
          description: Bad request - invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /transactions/update-remaining-time:
    post:
      summary: Manually update remaining time (admin only)
      security:
        - BearerAuth: []
      tags:
        - Transactions
      responses:
        "200":
          description: Remaining time updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateRemainingTimeResponse"
        "401":
          description: Unauthorized
        "500":
          description: Server error
  /transactions/cashin:
    post:
      summary: Initiate a cashin payment
      security:
        - BearerAuth: []
      description: Initiate a payment transaction to deposit funds into a merchant account via Paypack.
      tags:
        - Payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - number
                - duration
                - service
              properties:
                amount:
                  type: number
                  example: 1000
                  description: The amount to be deposited.
                number:
                  type: string
                  example: "0780000000"
                  description: The phone number of the customer initiating the payment.
                duration:
                  type: number
                  example: 2
                  description: Duration in months
                service:
                  type: string
                  example: "Tin (0-10M)"
                  description: Service to be paid for
      responses:
        "201":
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Payment request initiated, check your phone to complete payment.
                  data:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 1000
                      created_at:
                        type: string
                        example: 2005-11-09T21:19:07.459Z
                      kind:
                        type: string
                        example: CASHIN
                      ref:
                        type: string
                        example: d0bb2807-1d52-4795-b373-3feaf63dceb1
                      status:
                        type: string
                        example: pending
        "400":
          description: Bad request - Invalid input
        "500":
          description: Internal server error
  /announcements:
    post:
      summary: Create a new announcement
      security:
        - BearerAuth: []
      description: Creates a new announcement with the provided details
      tags:
        - Announcements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementCreate'
            example:
              title: "Important System Update"
              content: "We will be performing maintenance on our servers."
      responses:
        '201':
          description: Announcement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '400':
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all announcements
      description: Returns all announcements with optional filtering
      tags:
        - Announcements
      responses:
        '200':
          description: A list of announcements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Announcement'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /announcements/{id}:
    get:
      summary: Get announcement by ID
      description: Returns a single announcement by its ID
      tags:
        - Announcements
      parameters:
        - name: id
          in: path
          description: Announcement ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Announcement details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update an announcement
      security:
        - BearerAuth: []
      description: Updates an existing announcement
      tags:
        - Announcements
      parameters:
        - name: id
          in: path
          description: Announcement ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnouncementUpdate'
            example:
              title: "Updated System Announcement"
              content: "Maintenance has been rescheduled."
      responses:
        '200':
          description: Announcement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Announcement'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an announcement
      security:
        - BearerAuth: []
      description: Removes an announcement from the system
      tags:
        - Announcements
      parameters:
        - name: id
          in: path
          description: Announcement ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Announcement deleted successfully
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books:
    post:
      summary: Create a new book
      security:
        - BearerAuth: []
      description: Upload book details along with optional files.
      tags:
        - Books
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Clean Code"
                author:
                  type: string
                  example: "Robert C. Martin"
                language:
                  type: string
                  example: "English"
                type:
                  type: array
                  items:
                    type: string
                    example: "pdf"
                  minItems: 1
                  example: ["pdf", "audio"]
                coverImageUrl:
                  type: string
                  format: binary
                pdf:
                  type: string
                  format: binary
                audio:
                  type: string
                  format: binary
                video:
                  type: string
                  format: binary
              required:
                - title
                - author
                - language
                - type
      responses:
        '201':
          description: Book created successfully
        '400':
          description: Bad request
        '500':
          description: Server error

    get:
      summary: Get all books
      tags:
        - Books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '500':
          description: Server error

  /books/search:
    get:
      summary: Filter books
      tags:
        - Books
      parameters:
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: author
          schema:
            type: string
        - in: query
          name: language
          schema:
            type: string
        - in: query
          name: format
          schema:
            type: string
      responses:
        '200':
          description: Filtered books
        '500':
          description: Server error

  /books/{id}:
    get:
      summary: Get a book by ID
      security:
        - BearerAuth: []
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book details
        '404':
          description: Book not found
        '500':
          description: Server error

    patch:
      summary: Update a book
      security:
        - BearerAuth: []
      tags:
        - Books
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                language:
                  type: string
                type:
                  type: array
                  items:
                    type: string
                    example: "pdf"
                  minItems: 1
                  example: ["pdf", "audio"]
                coverImageUrl:
                  type: string
                  format: binary
                pdf:
                  type: string
                  format: binary
                audio:
                  type: string
                  format: binary
                video:
                  type: string
                  format: binary
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Book updated
        '404':
          description: Book not found
        '500':
          description: Server error

    delete:
      summary: Delete a book
      security:
        - BearerAuth: []
      tags:
        - Books
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Book deleted
        '500':
          description: Server error

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      properties:
        firstName:
          type: string
          description: The user's first name.
        secondName:
          type: string
          description: The user's second name (optional).
        email:
          type: string
          description: The user's email address (must be unique).
        phone:
          type: string
          description: The user's phone number (optional, must be unique).
        password:
          type: string
          description: The user's password.
        gender:
          type: string
          description: The user's gender (optional).
        dob:
          type: string
          format: date
          description: The user's date of birth (optional).
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
          description: The user's role in the system.
      required:
        - firstName
        - email
        - password

    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user.
        firstName:
          type: string
          description: The user's first name.
        secondName:
          type: string
          description: The user's second name (optional).
        email:
          type: string
          description: The user's email address.
        phone:
          type: string
          description: The user's phone number (optional).
        password:
          type: string
          description: The user's password.
        gender:
          type: string
          description: The user's gender (optional).
        dob:
          type: string
          format: date
          description: The user's date of birth (optional).
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
          description: The user's role.
        createdAt:
          type: string
          format: date-time
          description: The date and time the user was created.
        updatedAt:
          type: string
          format: date-time
          description: The date and time the user was last updated.

    Role:
      type: string
      enum: [USER, STAFF, ADMIN, PARTNER]
      description: The different roles a user can have in the system.
    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
        secondName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
        gender:
          type: string
        dob:
          type: string
          format: date
        role:
          type: string
          enum: [USER, STAFF, ADMIN, PARTNER]
      example:
        firstName: Jane
        secondName: Doe
        email: janedoe@example.com
        phone: 0781234567
        gender: Female
        dob: 1995-08-25
        role: USER
    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          example: error
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        method:
          type: string
          enum: [MTN, AIRTEL]
        duration:
          type: integer
          description: Duration in months
        remainingTime:
          type: integer
          description: Remaining time in days
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        service:
          type: string
        createdAt:
          type: string
          format: date-time

    TransactionWithUser:
      allOf:
        - $ref: "#/components/schemas/Transaction"
        - type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                firstName:
                  type: string
                secondName:
                  type: string

    CreateTransactionRequest:
      type: object
      required:
        - userId
        - amount
        - method
        - duration
        - service
      properties:
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        method:
          type: string
          enum: [MTN, AIRTEL]
        duration:
          type: integer
          description: Duration in months
        service:
          type: string

    UpdateTransactionRequest:
      type: object
      properties:
        amount:
          type: number
          format: float
        method:
          type: string
          enum: [MTN, AIRTEL]
        duration:
          type: integer
          description: Duration in months
        service:
          type: string
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]

    UpdateStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]

    DeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: Transaction deleted successfully

    UpdateRemainingTimeResponse:
      type: object
      properties:
        updated:
          type: integer
          description: Number of transactions updated
    AnnouncementCreate:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          description: Title of the announcement
        content:
          type: string
          description: Content of the announcement
    AnnouncementUpdate:
      type: object
      minProperties: 1
      properties:
        title:
          type: string
          description: Title of the announcement
        content:
          type: string
          description: Content of the announcement
    Announcement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the announcement
        title:
          type: string
          description: Title of the announcement
        content:
          type: string
          description: Content of the announcement
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
    Book:
          type: object
          properties:
            id:
              type: string
              format: uuid
            title:
              type: string
            author:
              type: string
            language:
              type: string
            coverImageUrlUrl:
              type: string
              format: uri
            pdfUrl:
              type: string
              format: uri
            audioUrl:
              type: string
              format: uri
            videoUrl:
              type: string
              format: uri
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time


